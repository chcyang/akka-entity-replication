akka {

  actor {
    provider = "cluster"

    serializers {
      kryo = "io.altoo.akka.serialization.kryo.KryoSerializer"
    }

    serialization-bindings {
      "java.io.Serializable" = kryo
    }

    allow-java-serialization = off
  }

  extensions += "com.romix.akka.serialization.kryo.KryoSerializationExtension$"

  remote {
    artery {
      transport = tcp
      hostname = "localhost"
      port = 25521
    }
  }

  cluster {
    seed-nodes = [
      "akka://ClusterSystem@localhost:25521"
    ]
    roles = ["request", "replica-group-1"] // "replica-group-1" was selected from lerna.akka.entityreplication.raft.multi-raft-roles
    sharding {
      role = "request"
    }

    auto-down-unreachable-after = off
  }

  persistence {
    journal {
      plugin = "akka.persistence.cassandra.journal"
    }
    snapshot-store {
      plugin = "akka.persistence.cassandra.snapshot"
    }
  }

  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
}

akka-kryo-serialization {
  type = "graph"
  id-strategy = "default"
}

// https://docs.datastax.com/en/developer/java-driver/4.5/manual/core/configuration/reference/
// Profileごとに上書きできるかどうかは、上記URLから確認できる。
datastax-java-driver {
  basic.contact-points = ["localhost:9042"]
  load-balancing-policy.local-datacenter = "datacenter1"
  advanced.connection.max-requests-per-connection = 1024

  profiles {
    akka-persistence-cassandra-journal-read-profile = ${datastax-java-driver.profiles.akka-persistence-cassandra-profile}
    akka-persistence-cassandra-journal-read-profile {
      basic.request.consistency = "ONE"
    }
    akka-persistence-cassandra-journal-write-profile = ${datastax-java-driver.profiles.akka-persistence-cassandra-profile}
    akka-persistence-cassandra-journal-write-profile {
      basic.request.consistency ="QUORUM"
    }
    akka-persistence-cassandra-snapshot-profile = ${datastax-java-driver.profiles.akka-persistence-cassandra-profile}
    akka-persistence-cassandra-snapshot-profile {
      basic.request.consistency = "ONE"
    }
  }
}

akka.persistence.cassandra {
  read-profile = "akka-persistence-cassandra-journal-read-profile"
  write-profile = "akka-persistence-cassandra-journal-write-profile"
  journal {
    replication-factor = 3
  }
  snapshot {
    read-profile = "akka-persistence-cassandra-snapshot-profile"
    write-profile = "akka-persistence-cassandra-snapshot-profile"
  }
}
