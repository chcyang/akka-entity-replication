lerna.akka.entityreplication {
  util {
    // rolling update 時に処理が timeout しないようにするための処理完了保証部品の設定
    at-least-once-complete {
      // 処理(Future)が完了するまでリトライする間隔
      retry-interval = 1 second
    }
  }

  // TODO: replication-timeout の適切な値を検討する
  replication-timeout = 3000 ms

  // How long wait before giving up entity recovery.
  // Entity recovery requires a snapshot, and failure fetching it will cause this timeout.
  // If timed out, entity recovery will be retried.
  recovery-entity-timeout = 10s

  raft {
    election-timeout = 750 ms
    heartbeat-interval = 100 ms
    multi-raft-roles = ["replica-group-1", "replica-group-2", "replica-group-3"]

    // log compaction settings
    compaction {
      // Time interval to check the size of the log and check if a snapshotting is needed to be taken
      log-size-check-interval = 10s
      // Threshold for saving snapshots and compaction of the log
      log-size-threshold = 10000
      // Time to keep a cache of snapshots in memory
      snapshot-cache-time-to-live = 10s
    }

    // The settings for Cassandra persistence plugin
    persistence.cassandra = ${akka.persistence.cassandra}
    persistence.cassandra {

      journal {

        // replication strategy to use.
        replication-strategy = "NetworkTopologyStrategy"

        // Replication factor list for data centers, e.g. ["dc0:3", "dc1:3"]. This setting is only used when replication-strategy is NetworkTopologyStrategy.
        // Replication factors should be 3 or more to maintain data consisstency.
        data-center-replication-factors = ["dc0:3"]

        // To limit the Cassandra hosts this plugin connects with to a specific datacenter.
        local-datacenter = "dc0"

        // Name of the keyspace to be used by the journal
        keyspace = "entity-replication"
      }

      snapshot {

        // replication strategy to use.
        replication-strategy = "NetworkTopologyStrategy"

        // Replication factor list for data centers, e.g. ["dc0:3", "dc1:3"]. This setting is only used when replication-strategy is NetworkTopologyStrategy.
        // Replication factors should be 3 or more to maintain data consisstency.
        data-center-replication-factors = ["dc0:3"]

        // To limit the Cassandra hosts this plugin connects with to a specific datacenter.
        local-datacenter = "dc0"

        // Name of the keyspace to be used by the snapshot store
        keyspace = "entity-replication-snapshot"
      }
    }

    persistence {
      // Absolute path to the journal plugin configuration entry.
      // The journal will be stored events which related to Raft.
      journal.plugin = "lerna.akka.entityreplication.raft.persistence.cassandra.journal"

      // Absolute path to the snapshot store plugin configuration entry.
      // The snapshot store will be stored state which related to Raft.
      snapshot-store.plugin = "lerna.akka.entityreplication.raft.persistence.cassandra.snapshot"
    }
  }

  raft.eventhandler {
    // 各 RaftActor から commit 済み event を保存する際の設定
    commit-log-store {
      // commit-log-store(sharding) が一時的に止まっている場合にeventがロストしないようにするためのリトライ設定
      retry {
        attempts = 15
        delay = 3 seconds
      }
    }

    // commit 済み event を保存する cassandra-journal & cassandra-query-journal (変更不要)
    // TODO: typeName ごとに切り替えできるようにする
    persistence.cassandra = ${akka.persistence.cassandra}
    persistence.cassandra = {
      journal {
        keyspace = "raft_commited_event"

        // 複数の Raft Shard で個別にcommitされた event をまとめて処理できるようにするための tag 付け (変更不要)
        event-adapters {
          tagging = "lerna.akka.entityreplication.raft.eventhandler.TaggingEventAdapter"
        }
        event-adapter-bindings {
          "java.lang.Object" = tagging
        }
      }
    }

    persistence {
      // Absolute path to the journal plugin configuration entry.
      // The journal stores Raft-committed events.
      journal.plugin = "lerna.akka.entityreplication.raft.eventhandler.persistence.cassandra.journal"

      // Absolute path to the query plugin configuration entry.
      // The query is used by Raft EventHandler.
      query.plugin = "lerna.akka.entityreplication.raft.eventhandler.persistence.cassandra.query"
    }
  }
}
