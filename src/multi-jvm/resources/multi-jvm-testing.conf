akka.remote.artery.canonical.port = 0

akka.persistence {
  journal.plugin = "akka.persistence.journal.proxy"
  snapshot-store.plugin = "akka.persistence.snapshot-store.proxy"
}

akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
}

akka.extensions = ["lerna.akka.entityreplication.ClusterReplication"]

akka.actor {
  provider = cluster
  allow-java-serialization = off
  serializers {
    kryo = "io.altoo.akka.serialization.kryo.KryoSerializer"
  }
  serialization-bindings {
    "lerna.akka.entityreplication.STMultiNodeSerializable" = kryo
    "akka.persistence.Protocol$Message" = kryo  // used by AkkaPersistenceProxy
    "akka.persistence.query.EventEnvelope" = kryo
    "lerna.akka.entityreplication.util.persistence.query.proxy.ReadJournalPluginProxyActor$Command" = kryo
    "lerna.akka.entityreplication.util.persistence.query.proxy.ReadJournalPluginProxyActor$Response" = kryo
  }
}

akka.test {
  single-expect-default = 15s
}

akka.actor.testkit.typed {
  single-expect-default = 15s
}

lerna.akka.entityreplication.raft.election-timeout = 1000 ms

lerna.akka.entityreplication.raft {
  persistence {
    journal.plugin = "akka.persistence.journal.proxy"
    snapshot-store.plugin = "akka.persistence.snapshot-store.proxy"
    query.plugin = "lerna.akka.entityreplication.util.persistence.query.proxy"
  }
}

lerna.akka.entityreplication.raft.eventsourced {
  persistence {
    journal.plugin = "akka.persistence.journal.proxy"
  }
}

akka.persistence.journal.proxy {
  start-target-journal = on
  target-journal-plugin = "inmemory-journal"
  init-timeout = 15s
}

akka.persistence.snapshot-store.proxy {
  start-target-snapshot-store = on
  target-snapshot-store-plugin = "inmemory-snapshot-store"
  init-timeout = 15s
}

lerna.akka.entityreplication.util.persistence.query.proxy {
  // Class name of the plugin.
  class = "lerna.akka.entityreplication.util.persistence.query.proxy.ReadJournalPluginProxyProvider"
  // The read journal plugin config path to use for the target read journal
  target-read-journal-plugin = "inmemory-read-journal"
}

inmemory-journal {
  event-adapters = ${lerna.akka.entityreplication.raft.persistence.journal-plugin-additional.event-adapters}
  event-adapter-bindings = ${lerna.akka.entityreplication.raft.persistence.journal-plugin-additional.event-adapter-bindings}
}
